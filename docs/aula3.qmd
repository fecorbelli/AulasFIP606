---
title: "Aula3"
format: html
editor: visual
message: false
warning: false
editor_options: 
  chunk_output_type: inline
---

## Importando os dados

Quando o conjunto de dados está em um arquivo csv na web, podemos utilizar a função `read_csv("endereço na web")` para importar os dados para o programa.

```{r}
library (tidyverse)
cr <- read_csv ("https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv")


glimpse(cr)
```

# Visualização de Dados

Podemos utilizar a biblioteca ggplot2 para vizualizar os dados do conjunto.

A função `geom_histogram()` irá criar um gráfico do tipo histograma com os dados, esse gráfico é indicado para variáveis resposta do tipo númerica contínua. Já a função `geom_boxplot()` irá criar um gráfico do tipo boxplot com os dados, esse tipo de gráfico apresenta a localização de 50% dos dados, bem como a mediana, quartil inferior e superior.

```{r}
cr %>%  
  ggplot (aes(x=inc))+ geom_histogram()

cr %>%  
  ggplot (aes(farm, inc))+ geom_boxplot()
```

A função facet_wrap é adicionada para separar os dados por região.

```{r}
cr %>%  
  ggplot (aes(x=inc))+ geom_histogram()+ facet_wrap(~region)

cr %>%  
  ggplot (aes(x=inc))+ geom_boxplot()+ facet_wrap(~region)
```

# Sumarização

Podemos utilizar a função `summary()` para obter os valores mínimos e máximos, média, mediana e quartil superior e inferior do conjunto simultaneamente. Podemos utilizar também a função `summarise()` para encontrar separadamente cada valor, sendo possível encontrar o valor de desvio padrão também. A função `group_by()` é utilizada para estabelecer como o conjunto de dados será agrupado.

```{r}

summary(cr$inc)

#média do conjunto de dados
cr %>% 
  group_by(region) %>% 
  summarise(inc_mean = mean(inc))

#média e desvio padrão
cr %>% 
  group_by(region) %>% 
  summarise(inc_mean = mean(inc), sd_mean = sd(inc))

#média, mediana e desvio padrão
cr %>% 
  group_by(region) %>% 
  summarise(inc_mean = mean(inc),inc_med = median(inc), sd_mean = sd(inc))

cr %>% 
  group_by(cultivar) %>% 
  summarise(inc_mean = mean(inc),inc_med = median(inc), sd_mean = sd(inc))
```

# Visualização

Podemos utilizar a biblioteca ggplot2 para vizualizar os dados do conjunto em diferentes formas.

```{r}
cr %>% 
  ggplot(aes(inc,sev2)) + geom_point()


cr %>%  
  ggplot (aes(x=sev2))+ geom_histogram()+ facet_wrap(~region)


cr %>% 
  group_by(cultivar) %>% 
  summarise(sev_mean = mean(sev2),sev_med = median(sev2), sev_sd = sd(sev2))


cr %>%  
  ggplot (aes(x = sev2)) + geom_histogram()+ facet_wrap(region ~ cultivar)

cr %>%  
  ggplot (aes(x = sev2)) + geom_histogram() + facet_grid(region ~ cultivar)

cr %>%  
  ggplot (aes(x = sev2, fill = region)) + geom_histogram() + facet_wrap(region ~ cultivar)
```

## Personalização da Visualização dos dados

O pacote **ggthemes** apresenta diversos temas que podem ser utilizados para personalizar os gráficos, bem como possibilidades de personalização dos elementos gráficos.

Podemos utilizar `scale_fill_colorblind()` para uma coloração pré-definida para as colunas ou adicionar manualmente as cores desejadas com `scale_fill_manual()`. Podemos adicionar um tema como, por exemplo, `theme_minimal()` e adicionar anotações com a função `labs()`.

```{r}
library(ggthemes)

cr %>%  
ggplot (aes(x = sev2, fill = region))+
geom_histogram()+
facet_grid(region ~ cultivar)+
scale_fill_colorblind()

cr %>% 
ggplot (aes(x = sev2, fill = region))+
geom_histogram()+
facet_grid(region ~ cultivar)+ 
scale_fill_manual(values = c("red","blue"))+
theme_minimal(base_size = 14)+
theme(legend.position = "bottom")+
labs (y= "frequency", 
     x= "severity (%)", fill = "region")

cr %>% 
ggplot (aes(x = sev2, fill = region))+
geom_histogram(color = "white") +
facet_grid(region ~ cultivar)+ 
scale_fill_manual(values = c("red","blue"))+
theme_minimal(base_size = 14)+
theme(legend.position = "bottom")+
labs (y= "frequency", 
     x= "severity (%)", fill = "region")
  

```

# Criar Subconjuntos

Podemos utilizar as funções `select()` e `filter()` do pacote **dplyr** para selecionar colunas e linhas, respectivamente

```{r}
# filtra Oromia

cr_oromia <- cr %>% 
  select (farm, region, cultivar, sev2) %>% 
  filter(region == "Oromia")

cr_oromia

# filtra SNNPR
cr_pr <- cr %>% 
  select (farm, region, cultivar, sev2) %>% 
  filter(region == "SNNPR")

cr_pr

```

## Visualização dos subconjuntos

Criação de gráficos boxplot para cada subconjunto.

```{r}
p1 <- cr_oromia %>% 
  ggplot(aes(cultivar,sev2, fill = cultivar))+ 
  geom_boxplot()+
  theme_few()+
  scale_fill_few()+
  labs(x = "", 
       y= "Severity (%)") +
  coord_flip()
```

```{r}
p2 <- cr_pr %>% 
  ggplot(aes(cultivar,sev2, fill = cultivar))+ 
  geom_boxplot()+
  theme_few()+
  scale_fill_few()+
  labs(x= "", 
       y= "Severity(%)") +
coord_flip()
```

## Juntar os gráficos em diferentes posicionamntos

Para juntar diferentes gráficos em uma mesma imagem podemos utilizar o pacote **patchwork**. Para posicionamento ao lado utilizamos "+" e para posicionamento de um acima ao outro utilizamos "/".

```{r}
library(patchwork)

# Ao lado
p1 + p2

# Acima 
p1 / p2
```

Para retirar a legenda dplicada devemos adicionar `plot_layout(guides = "collect")`. E para atribuir letras a cada gráfico utilizamos `plot_annotation(tag_levels = "A")`.

```{r}
# Retirar a legenda duplicada
(p1 + p2) +
  plot_layout(guides = "collect")

# Atribuir letras a cada gráfico
(p1 / p2) +
  plot_layout(guides = "collect") +
  plot_annotation(tag_levels = "A")
```

Para salvar o gráfico, utilizamos a função `ggsave()`.

```{r}

ggsave("patch1.png", width = 5, 
       height = 4)

```

Para retirar a duplicação de cultivar e severidade nos graficos adicionamos `axes = "collect"`

```{r}
(p1 / p2) +
plot_layout(guides = "collect",
            axes = "collect" ) +
  plot_annotation(tag_levels = "A")
```

Para atribuir um título geral e fonte aos gráficos, adicionamos `plot_annotation(title = "Título", caption = "fonte"`.

```{r}
(p1 / p2) +
plot_layout(guides = "collect",
            axes = "collect" ) +
  plot_annotation(title = "Coffee rust in Ethiopia",
                  caption = "source: Del Ponte(2022)"
                  ,tag_levels = "A")
```

## Adicionar um gráfico em um determinado posicionamento de um outro gráfico

Para adicionar um gráfico ou elemento a outro gráfico em um posicionamento próprio, utilizamos a função `inset_element()`.

```{r}
p3 <- cr_oromia %>% 
  ggplot(aes(x=sev2))+
  geom_histogram()

p1 + inset_element (p3, left = 0.6, bottom = 0.6, right = 1, top = 1)
```
